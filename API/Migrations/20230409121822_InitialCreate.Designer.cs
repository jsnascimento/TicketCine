// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using API.Data;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(APIContext))]
    [Migration("20230409121822_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Assento", b =>
                {
                    b.Property<string>("Identificador")
                        .HasColumnType("text");

                    b.Property<bool>("Ocupado")
                        .HasColumnType("boolean");

                    b.Property<int>("SalaNumero")
                        .HasColumnType("integer");

                    b.HasKey("Identificador");

                    b.HasIndex("SalaNumero");

                    b.ToTable("assentos");
                });

            modelBuilder.Entity("API.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCliente"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdCliente");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("API.Models.Compra", b =>
                {
                    b.Property<int>("idCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("idCompra"));

                    b.HasKey("idCompra");

                    b.ToTable("compras");
                });

            modelBuilder.Entity("API.Models.Filme", b =>
                {
                    b.Property<int>("IdFilme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdFilme"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duracao")
                        .HasColumnType("integer");

                    b.Property<int>("GeneroIdGenero")
                        .HasColumnType("integer");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdFilme");

                    b.HasIndex("GeneroIdGenero");

                    b.ToTable("filmes");
                });

            modelBuilder.Entity("API.Models.Genero", b =>
                {
                    b.Property<int>("IdGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGenero"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdGenero");

                    b.ToTable("generos");
                });

            modelBuilder.Entity("API.Models.Ingresso", b =>
                {
                    b.Property<string>("CodIngresso")
                        .HasColumnType("text");

                    b.Property<string>("AssentoIdentificador")
                        .HasColumnType("text");

                    b.Property<int?>("CompraidCompra")
                        .HasColumnType("integer");

                    b.Property<int>("SessaoIdSessao")
                        .HasColumnType("integer");

                    b.HasKey("CodIngresso");

                    b.HasIndex("AssentoIdentificador");

                    b.HasIndex("CompraidCompra");

                    b.HasIndex("SessaoIdSessao");

                    b.ToTable("ingressos");
                });

            modelBuilder.Entity("API.Models.Operador", b =>
                {
                    b.Property<string>("CPF")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CPF");

                    b.ToTable("operadores");
                });

            modelBuilder.Entity("API.Models.Pagamento", b =>
                {
                    b.Property<int>("IdPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPagamento"));

                    b.Property<int>("ClienteIdCliente")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Pago")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("IdPagamento");

                    b.HasIndex("ClienteIdCliente");

                    b.ToTable("pagamentos");
                });

            modelBuilder.Entity("API.Models.Sala", b =>
                {
                    b.Property<int>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Numero"));

                    b.Property<int>("QtdAssentos")
                        .HasColumnType("integer");

                    b.HasKey("Numero");

                    b.ToTable("salas");
                });

            modelBuilder.Entity("API.Models.Sessao", b =>
                {
                    b.Property<int>("IdSessao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSessao"));

                    b.Property<int>("FilmeIdFilme")
                        .HasColumnType("integer");

                    b.Property<DateTime>("HoraFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SalaNumero")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("IdSessao");

                    b.HasIndex("FilmeIdFilme");

                    b.HasIndex("SalaNumero");

                    b.ToTable("sessoes");
                });

            modelBuilder.Entity("API.Models.Assento", b =>
                {
                    b.HasOne("API.Models.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaNumero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("API.Models.Filme", b =>
                {
                    b.HasOne("API.Models.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroIdGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("API.Models.Ingresso", b =>
                {
                    b.HasOne("API.Models.Assento", "Assento")
                        .WithMany()
                        .HasForeignKey("AssentoIdentificador");

                    b.HasOne("API.Models.Compra", null)
                        .WithMany("Ingressos")
                        .HasForeignKey("CompraidCompra");

                    b.HasOne("API.Models.Sessao", "Sessao")
                        .WithMany()
                        .HasForeignKey("SessaoIdSessao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assento");

                    b.Navigation("Sessao");
                });

            modelBuilder.Entity("API.Models.Pagamento", b =>
                {
                    b.HasOne("API.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteIdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("API.Models.Sessao", b =>
                {
                    b.HasOne("API.Models.Filme", "Filme")
                        .WithMany()
                        .HasForeignKey("FilmeIdFilme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaNumero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filme");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("API.Models.Compra", b =>
                {
                    b.Navigation("Ingressos");
                });
#pragma warning restore 612, 618
        }
    }
}
